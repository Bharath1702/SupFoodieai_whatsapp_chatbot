require('dotenv').config();
const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
const mongoose = require("mongoose");
const Razorpay = require('razorpay');

const app = express().use(bodyParser.json());

const token = process.env.TOKEN;
const mytoken = process.env.MYTOKEN;
const mongodbUri = process.env.MONGODB_URI;
const phone_number_id = process.env.PHONE_NUMBER_ID;
const port = process.env.PORT || 3000;

const razorpay = new Razorpay({
    key_id: process.env.RAZORPAY_KEY_ID,
    key_secret: process.env.RAZORPAY_KEY_SECRET,
});

console.log('Environment Variables:');
console.log('TOKEN:', token);
console.log('MYTOKEN:', mytoken);
console.log('MONGODB_URI:', mongodbUri);
console.log('PHONE_NUMBER_ID:', phone_number_id);
console.log('PORT:', port);

if (!mongodbUri) {
    console.error("MongoDB URI is not defined. Please check your .env file.");
    process.exit(1);
}

// Connect to MongoDB
mongoose.connect(mongodbUri, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => {
        console.error('MongoDB connection error:', err);
        process.exit(1);
    });

// Order schema
const orderSchema = new mongoose.Schema({
    sender: String,
    items: [{
        id: String,
        title: String,
        price: Number,
        quantity: Number
    }],
    orderId: String,
    totalAmount: Number,
    paymentMethod: {
        type: String,
        enum: ['Cash', 'Online'],
        default: 'Cash'
    },
    paymentStatus: {
        type: String,
        enum: ['Pending', 'Paid', 'Failed'],
        default: 'Pending'
    },
    date: { type: Date, default: Date.now },
    status: {
        type: String,
        enum: ['Pending', 'Accepted', 'Rejected', 'Cooking', 'Ready', 'Cancelled'],
        default: 'Pending'
    },
    lastNotifiedStatus: {  // Field to track last notified status
        type: String,
        default: 'Pending'
    }
});

const Order = mongoose.model('Order', orderSchema);

let menuItems = [
    { id: "1", title: "Idly", price: 20 },
    { id: "2", title: "Vade", price: 10 },
    { id: "3", title: "Pulav", price: 45 },
    { id: "4", title: "Ghee Masala Dosa", price: 45 },
    { id: "5", title: "Pudi Masala Dosa", price: 55 },
    { id: "6", title: "Bhatu Masala Dosa", price: 45 },
    { id: "7", title: "Khali Masala Dosa", price: 35 },
];

let awaitingQuantity = {};
let awaitingOrderId = {};
let orders = {};

// Start server
app.listen(port, () => {
    console.log(`Webhook is listening on port ${port}`);
});

// Polling function to check for status changes
async function checkForOrderUpdates() {
    console.log("Polling for order updates...");

    try {
        // Find all orders where the current status is different from the last notified status
        const ordersToUpdate = await Order.find({ $expr: { $ne: ["$status", "$lastNotifiedStatus"] } });

        console.log(`Found ${ordersToUpdate.length} orders with updated statuses.`);

        for (const order of ordersToUpdate) {
            const currentStatus = order.status;
            const lastNotifiedStatus = order.lastNotifiedStatus;

            if (currentStatus !== lastNotifiedStatus) {
                console.log(`Sending update for order ${order.orderId} with status: ${currentStatus}`);
                await sendStatusUpdate(order.sender, order, currentStatus);

                // Update the lastNotifiedStatus after sending the message
                order.lastNotifiedStatus = currentStatus;
                await order.save();
            }
        }
    } catch (error) {
        console.error('Error checking for order updates:', error);
    }
}

// Run the polling function every minute (60000 milliseconds)
setInterval(checkForOrderUpdates, 60000);  // 60000 milliseconds = 1 minute

// Function to send order status update to the user
async function sendStatusUpdate(sender, order, status) {
    let message = '';

    switch (status) {
        case 'Accepted':
            message = 'Your order has been accepted!';
            break;
        case 'Cooking':
            message = 'Your food is being cooked!';
            break;
        case 'Ready':
            message = 'Your order is ready for pickup!';
            break;
        case 'Rejected':
            message = 'Unfortunately, your order was rejected.';
            break;
        case 'Cancelled':
            message = 'Your order has been cancelled.';
            break;
        default:
            message = 'There has been an update to your order status.';
    }

    await sendReply(sender, message);  // Send the message using WhatsApp API
}

// WhatsApp webhook setup
app.get("/webhook", (req, res) => {
    let mode = req.query["hub.mode"];
    let challenge = req.query["hub.challenge"];
    let token = req.query["hub.verify_token"];

    if (mode && token) {
        if (mode === "subscribe" && token === mytoken) {
            res.status(200).send(challenge);
        } else {
            res.sendStatus(403);
        }
    }
});

app.post("/webhook", async (req, res) => {
    try {
        let body_param = req.body;

        console.log(JSON.stringify(body_param, null, 2));

        if (body_param.object) {
            if (body_param.entry &&
                body_param.entry[0].changes &&
                body_param.entry[0].changes[0].value.messages &&
                body_param.entry[0].changes[0].value.messages[0]
            ) {
                let from = body_param.entry[0].changes[0].value.messages[0].from;
                let msg_body = (body_param.entry[0].changes[0].value.messages[0].interactive && body_param.entry[0].changes[0].value.messages[0].interactive.button_reply && body_param.entry[0].changes[0].value.messages[0].interactive.button_reply.id) ||
                               (body_param.entry[0].changes[0].value.messages[0].interactive && body_param.entry[0].changes[0].value.messages[0].interactive.list_reply && body_param.entry[0].changes[0].value.messages[0].interactive.list_reply.id) ||
                               body_param.entry[0].changes[0].value.messages[0].text.body;

                await handleIncomingMessage(from, msg_body);
                res.sendStatus(200);
            } else {
                res.sendStatus(404);
            }
        }
    } catch (error) {
        console.error("Error handling webhook event: ", error);
        res.sendStatus(500);
    }
});

async function saveOrderToDatabase(sender, orderId, paymentMethod = 'Cash', paymentStatus = 'Pending') {
    try {
        let totalAmount = 0;

        if (orders[sender] && orders[sender].items && orders[sender].items.length > 0) {
            orders[sender].items.forEach(item => {
                const itemTotal = item.price * item.quantity;
                totalAmount += itemTotal;
            });

            // Save order to database
            const newOrder = new Order({
                sender,
                items: orders[sender].items,
                orderId,
                totalAmount,
                paymentMethod,
                paymentStatus,
                status: 'Pending'  // Default order status
            });
            await newOrder.save();
            console.log("Order saved successfully:", newOrder);  // Log saved order

            // Clear the order
            resetOrder(sender);
        } else {
            console.log("No items found in the order for sender:", sender);
        }
    } catch (error) {
        console.error("Error saving order to database:", error);
        throw error;  // Rethrow to handle in higher-level logic
    }
}

async function sendReceipt(sender, orderId) {
    try {
        // Retrieve the order from the database using the orderId
        const order = await Order.findOne({ orderId, sender });
        if (!order) {
            await sendReply(sender, "Sorry, we couldn't find your order. Please try again.");
            return;
        }

        // Build the receipt message
        let receiptMessage = `Order Receipt:\nOrder ID: ${order.orderId}\n\n`;
        order.items.forEach(item => {
            receiptMessage += `${item.title} x ${item.quantity} = ₹${item.price * item.quantity}\n`;
        });
        receiptMessage += `\nTotal Amount: ₹${order.totalAmount}\n`;
        receiptMessage += `Payment Method: ${order.paymentMethod}\n`;
        receiptMessage += `Order Status: ${order.status}\n`;
        receiptMessage += `\nThank you for your order!`;

        // Send the receipt as a reply
        await sendReply(sender, receiptMessage, false);
    } catch (error) {
        console.error('Error sending receipt:', error);
        await sendReply(sender, "Something went wrong while generating your receipt. Please try again.");
    }
}

async function handleIncomingMessage(sender, message) {
    try {
        // Check if we are awaiting quantity input for an item
        if (awaitingQuantity[sender]) {
            const item = awaitingQuantity[sender];
            delete awaitingQuantity[sender];

            // Handle quantity selection
            if (message.startsWith('Qty_')) {
                const quantity = parseInt(message.split('_')[1]);
                if (!isNaN(quantity) && quantity > 0) {
                    if (!orders[sender]) {
                        orders[sender] = { items: [] };
                    }
                    // Add or update the item in the order
                    const existingItem = orders[sender].items.find(i => i.id === item.id);
                    if (existingItem) {
                        existingItem.quantity += quantity;
                    } else {
                        orders[sender].items.push({ ...item, quantity });
                    }
                    await sendCatalog(sender, `Added ${quantity} x ${item.title} to your order. What would you like to do next?`);
                } else {
                    await sendReply(sender, 'Invalid quantity. Please select a valid number.');
                    awaitingQuantity[sender] = item;  // Re-prompt for quantity
                }
            } else {
                await sendQuantityOptions(sender, item);
            }
        }
        // Handle order tracking by order ID
        else if (awaitingOrderId[sender]) {
            const orderId = message;
            delete awaitingOrderId[sender];
            await trackOrderByID(sender, orderId);
        }
        // General commands for starting or continuing interaction
        else if (message.toLowerCase() === 'hi' || message.toLowerCase() === 'hii' || message.toLowerCase() === 'start') {
            await sendCatalog(sender);
        } 
        // View the menu
        else if (message === 'ViewMenu') {
            await sendMenu(sender);
        } 
        // Place the order and review the summary
        else if (message === 'PlaceOrder') {
            await sendOrderSummary(sender);
        } 
        // Edit the current order
        else if (message === 'EditOrder') {
            await sendEditOrderOptions(sender);
        } 
        // Main Menu option
        else if (message === 'MainMenu') {
            await sendCatalog(sender);
        }
        // Track Order Status
        else if (message === 'TrackOrderStatus') {
            await sendTrackOrderOptions(sender);
        }
        // Track the current order status
        else if (message === 'TrackCurrentOrder') {
            await trackOrderStatus(sender);
        } 
        // Track an order by ID
        else if (message === 'TrackOrderByID') {
            awaitingOrderId[sender] = true;
            await sendReply(sender, 'Please enter your Order ID:', false);
        }
        // Handle item selection from menu
        else if (message.startsWith('Item_')) {
            const itemId = message.split('_')[1];
            const item = menuItems.find(i => i.id === itemId);
            if (item) {
                awaitingQuantity[sender] = item;
                await sendQuantityOptions(sender, item);
            }
        } 
        // Remove an item from the order
        else if (message.startsWith('Remove_')) {
            const itemId = message.split('_')[1];
            if (orders[sender] && orders[sender].items) {
                orders[sender].items = orders[sender].items.filter(item => item.id !== itemId);
                await sendCatalog(sender, `Removed item from your order. What would you like to do next?`);
            }
        } 
        // Place another order
        else if (message === 'OrderAgain') {
            await sendCatalog(sender, 'Would you like to place another order? Here is the menu:');
        } 
        // Cancel an order by ID
        else if (message.startsWith('CancelOrder_')) {
            const orderId = message.split('_')[1];
            await cancelOrder(sender, orderId);
        } 
        // Handle Pay Cash option
        else if (message === 'PayCash') {
            const orderId = generateOrderId();  // Generate Order ID for cash payment
            await saveOrderToDatabase(sender, orderId, 'Cash', 'Pending');  // Save the order to the database
            await sendReceipt(sender, orderId);  // Send the receipt to the user
        } 
        // Handle Pay Online option with Razorpay payment link
        else if (message === 'PayOnline') {
            // Calculate the total amount and create Razorpay payment link
            let totalAmount = 0;
            if (orders[sender] && orders[sender].items && orders[sender].items.length > 0) {
                orders[sender].items.forEach(item => {
                    totalAmount += item.price * item.quantity;
                });

                // Create a Razorpay payment link
                const paymentLinkData = {
                    amount: totalAmount * 100, // amount in paise
                    currency: 'INR',
                    accept_partial: false,
                    description: 'Payment for your order',
                    customer: {
                        contact: sender, // WhatsApp number including country code
                        // email can be added if available
                    },
                    notify: {
                        sms: false,
                        email: false,
                        whatsapp: false,
                    },
                    reminder_enable: true,
                    notes: {
                        order_id: generateOrderId(), // You can generate an order ID here if needed
                    }
                };

                try {
                    const paymentLink = await razorpay.paymentLink.create(paymentLinkData);
                    // Store the payment link ID and order details
                    if (!orders[sender]) {
                        orders[sender] = { items: [] };
                    }
                    orders[sender].paymentLinkId = paymentLink.id;
                    orders[sender].paymentLink = paymentLink.short_url;
                    orders[sender].totalAmount = totalAmount;
                    await sendPaymentLinkWithButtons(sender, paymentLink.short_url, totalAmount);
                } catch (error) {
                    console.error('Error creating Razorpay payment link:', error);
                    await sendReply(sender, 'Failed to create payment link. Please try again later.');
                }
            } else {
                await sendReply(sender, "Your order is empty. Please add items to your order.");
            }
        }
        // Handle Payment Completed action
        else if (message === 'PaymentCompleted') {
            // Check payment status with Razorpay
            if (orders[sender] && orders[sender].paymentLinkId) {
                const paymentLinkId = orders[sender].paymentLinkId;

                try {
                    // Fetch payment link details from Razorpay
                    const paymentLinkDetails = await razorpay.paymentLink.fetch(paymentLinkId);

                    if (paymentLinkDetails.status === 'paid') {
                        // Payment was successful
                        const orderId = generateOrderId();  // Generate Order ID
                        await saveOrderToDatabase(sender, orderId, 'Online', 'Paid');  // Save the order to the database
                        await sendReceipt(sender, orderId);  // Send the receipt to the user

                        // Clear the paymentLinkId
                        delete orders[sender].paymentLinkId;
                    } else {
                        // Payment not completed
                        await sendReply(sender, 'Payment not completed yet. Please complete the payment using the link below.');
                        // Resend the payment link with buttons
                        await sendPaymentLinkWithButtons(sender, orders[sender].paymentLink, orders[sender].totalAmount);
                    }
                } catch (error) {
                    console.error('Error fetching payment link details:', error);
                    await sendReply(sender, 'Failed to verify payment. Please try again later.');
                }
            } else {
                await sendReply(sender, 'No payment link found. Please try placing the order again.');
            }
        }
        // Handle Cancel Order action after payment link is sent
        else if (message === 'CancelOrder') {
            // Reset the order
            resetOrder(sender);
            await sendReply(sender, 'Your order has been cancelled.');
            // Also, if there's a paymentLinkId, cancel the payment link via Razorpay API
            if (orders[sender] && orders[sender].paymentLinkId) {
                const paymentLinkId = orders[sender].paymentLinkId;
                try {
                    await razorpay.paymentLink.cancel(paymentLinkId);
                    delete orders[sender].paymentLinkId;
                    console.log('Payment link cancelled successfully');
                } catch (error) {
                    console.error('Error cancelling payment link:', error);
                }
            }
        }
        // Fallback for unrecognized messages
        else {
            await sendReply(sender, "Sorry, I didn't understand that.\nPlease type 'Hi' to begin.");
        }
    } catch (error) {
        console.error("Error handling incoming message:", error);
        await sendReply(sender, "An error occurred. Please try again.");
    }
}

async function sendQuantityOptions(sender, item) {
    const quantityOptions = {
        messaging_product: "whatsapp",
        recipient_type: "individual",
        to: sender,
        type: "interactive",
        interactive: {
            type: "list",
            header: {
                type: "text",
                text: `Select quantity for ${item.title}`
            },
            body: {
                text: `Choose a quantity for ${item.title}:`
            },
            action: {
                button: "Select Quantity",
                sections: [
                    {
                        title: "Quantities",
                        rows: Array.from({ length: 10 }, (_, i) => ({
                            id: `Qty_${i + 1}`,
                            title: `${i + 1}`
                        }))
                    }
                ]
            }
        }
    };

    await sendReplyInteractive(sender, quantityOptions);
}

async function sendCatalog(sender, extraMessage = 'Hello,\n I am Optimus Prime,\nWe are delighted to assist you with your food order. To get started,\n Please select one of the following options') {
    const catalogMessage = {
        messaging_product: "whatsapp",
        recipient_type: "individual",
        to: sender,
        type: "interactive",
        interactive: {
            type: "list",
            header: {
                type: "text",
                text: "Welcome to Our Food Service"
            },
            body: {
                text: extraMessage
            },
            action: {
                button: "Choose an option",
                sections: [
                    {
                        title: "Main Menu",
                        rows: [
                            {
                                id: "ViewMenu",
                                title: "View Menu",
                                description: "Browse our delicious menu items"
                            },
                            {
                                id: "PlaceOrder",
                                title: "Place Order",
                                description: "Complete your current order"
                            },
                            {
                                id: "EditOrder",
                                title: "Edit Order",
                                description: "Modify or remove items from your order"
                            },
                            {
                                id: "TrackOrderStatus",
                                title: "Track Order",
                                description: "Track the status of your current order"
                            }
                        ]
                    }
                ]
            }
        }
    };

    await sendReplyInteractive(sender, catalogMessage);
}

async function sendMenu(sender, extraMessage = '') {
    const menuMessage = {
        messaging_product: "whatsapp",
        recipient_type: "individual",
        to: sender,
        type: "interactive",
        interactive: {
            type: "list",
            header: {
                type: "text",
                text: "MENU📄"
            },
            body: {
                text: `${extraMessage}\nPlease choose an item:`
            },
            footer: {
                text: "Select an item to add to your order"
            },
            action: {
                button: "Menu Items",
                sections: [
                    {
                        title: "Items",
                        rows: menuItems.map(item => ({
                            id: `Item_${item.id}`,
                            title: item.title,
                            description: `₹${item.price}`
                        }))
                    }
                ]
            }
        }
    };

    await sendReplyInteractive(sender, menuMessage);
}

async function sendEditOrderOptions(sender) {
    const order = (orders[sender] && orders[sender].items) || [];
    if (order.length === 0) {
        await sendReply(sender, "Your order is empty.");
        return;
    }
    const editOrderMessage = {
        messaging_product: "whatsapp",
        recipient_type: "individual",
        to: sender,
        type: "interactive",
        interactive: {
            type: "list",
            header: {
                type: "text",
                text: "Edit Order"
            },
            body: {
                text: "Select an item to remove from your order:"
            },
            footer: {
                text: "Choose an item to remove"
            },
            action: {
                button: "Order Items",
                sections: [
                    {
                        title: "Current Order",
                        rows: order.map(item => ({
                            id: `Remove_${item.id}`,
                            title: item.title,
                            description: `Quantity: ${item.quantity}`
                        }))
                    }
                ]
            }
        }
    };

    await sendReplyInteractive(sender, editOrderMessage);
}

function generateOrderId() {
    return Math.floor(10000 + Math.random() * 90000).toString();
}

async function sendReplyWithPaymentOptions(sender, orderSummary) {
    const paymentOptions = {
        messaging_product: "whatsapp",
        recipient_type: "individual",
        to: sender,
        type: "interactive",
        interactive: {
            type: "button",
            body: {
                text: `${orderSummary}\n\nPlease choose a payment method:`
            },
            action: {
                buttons: [
                    { type: "reply", reply: { id: "PayOnline", title: "Pay Online" } },
                    { type: "reply", reply: { id: "PayCash", title: "Pay Cash" } }
                ]
            }
        }
    };

    await sendReplyInteractive(sender, paymentOptions);
}

async function sendOrderSummary(sender) {
    let orderSummary = "Order Summary:\n";
    let totalAmount = 0;
    
    if (orders[sender] && orders[sender].items && orders[sender].items.length > 0) {
        orders[sender].items.forEach(item => {
            const itemTotal = item.price * item.quantity;
            totalAmount += itemTotal;
            orderSummary += `${item.title} x ${item.quantity} = ₹${itemTotal}\n`;
        });
        orderSummary += `Total Amount: ₹${totalAmount}\n`;

        // Send order summary with payment buttons
        await sendReplyWithPaymentOptions(sender, orderSummary);
    } else {
        orderSummary = "You have no items in your order.\nSend 'hi' to order something.";
        await sendReply(sender, orderSummary);
    }
}

async function sendReplyWithButton(sender, reply, orderComplete = false) {
    const buttons = orderComplete ? [
        { type: "reply", reply: { id: "OrderAgain", title: "Order Again" } },
        { type: "reply", reply: { id: "MainMenu", title: "Main Menu" } }
    ] : [
        { type: "reply", reply: { id: "TrackOrderStatus", title: "Check Order Status" } },
        { type: "reply", reply: { id: "MainMenu", title: "Main Menu" } }
    ];

    const message = {
        messaging_product: "whatsapp",
        recipient_type: "individual",
        to: sender,
        type: "interactive",
        interactive: {
            type: "button",
            body: {
                text: reply
            },
            action: {
                buttons: buttons
            }
        }
    };

    try {
        const response = await axios({
            method: "POST",
            url: `https://graph.facebook.com/v13.0/${phone_number_id}/messages?access_token=${token}`,
            data: message,
            headers: {
                "Content-Type": "application/json"
            }
        });
        console.log('Message with button sent:', response.data);
    } catch (error) {
        console.error('Error sending message with button:', error.response ? error.response.data : error.message);
    }
}

async function sendReply(sender, reply, sendStatusButton = true) {
    try {
        const response = await axios({
            method: "POST",
            url: `https://graph.facebook.com/v13.0/${phone_number_id}/messages?access_token=${token}`,
            data: {
                messaging_product: "whatsapp",
                to: sender,
                text: {
                    body: reply
                }
            },
            headers: {
                "Content-Type": "application/json"
            }
        });
        console.log('Message sent:', response.data);

        // Only send the "Check Order Status" button if sendStatusButton is true
        if (sendStatusButton) {
            await sendReplyWithButton(sender, "Click the button below to check your order status.\nSend 'hi' to place a new order");
        }
    } catch (error) {
        console.error('Error sending reply:', error.response ? error.response.data : error.message);
    }
}

async function sendReplyInteractive(sender, interactiveMessage) {
    try {
        const response = await axios({
            method: "POST",
            url: `https://graph.facebook.com/v13.0/${phone_number_id}/messages?access_token=${token}`,
            data: interactiveMessage,
            headers: {
                "Content-Type": "application/json"
            }
        });
        console.log('Interactive message sent:', response.data);
    } catch (error) {
        console.error('Error sending interactive message:', error.response ? error.response.data : error.message);
    }
}

function resetOrder(sender) {
    delete orders[sender];
}

app.patch('/orders/:id/status', async (req, res) => {
  try {
    const order = await Order.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ message: "Cannot find order \nSend 'hi' to make a new order" });
    }
    console.log(`Updating order ${order.orderId} status from ${order.status} to ${req.body.status}`);  // Log the update

    order.status = req.body.status;
    const updatedOrder = await order.save();

    await sendStatusUpdate(order.sender, updatedOrder, order.status);

    res.json(updatedOrder);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

async function trackOrderStatus(sender) {
    try {
        const latestOrder = await Order.findOne({ sender }).sort({ date: -1 });
        if (latestOrder) {
            let message;
            let orderComplete = false;
            switch (latestOrder.status) {
                case 'Accepted':
                    message = 'Your order is confirmed.';
                    break;
                case 'Rejected':
                    message = "Sorry to say this, \n We couldn't complete your order.\n SEND 'hi' to order again.";
                    break;
                case 'Cooking':
                    message = 'Your food is being prepared.';
                    break;
                case 'Ready':
                    message = 'Your order is ready. Please collect your item.';
                    orderComplete = true;
                    break;
                case 'Cancelled':
                    message = 'Your order was cancelled.';
                    orderComplete = true;
                    break;
                default:
                    message ="Wait while your order is being confirmed.";
            }
            if (latestOrder.status === 'Pending') {
                message += "\nIf you wish to cancel your order, click the button below.";
                await sendReplyWithCancelOption(sender, message, latestOrder.orderId);
            } else {
                await sendReplyWithButton(sender, message, orderComplete);
            }
        } else {
            await sendReplyWithButton(sender, 'No orders found.');
        }
    } catch (error) {
        console.error("Error tracking order status: ", error);
        await sendReplyWithButton(sender, 'Oops, something went wrong....');
    }
}

async function trackOrderByID(sender, orderId) {
    try {
        const order = await Order.findOne({ orderId, sender });
        if (order) {
            let message;
            let orderComplete = false;
            switch (order.status) {
                case 'Accepted':
                    message = 'Your order is confirmed.';
                    break;
                case 'Rejected':
                    message = "Sorry to say this, \n We couldn't complete your order.\n SEND 'hi' to order again.";
                    break;
                case 'Cooking':
                    message = 'Your food is being prepared.';
                    break;
                case 'Ready':
                    message = 'Your order is ready. Please collect your item.';
                    orderComplete = true;
                    break;
                default:
                    message ="Wait while your order is being confirmed.";
            }
            if (order.status === 'Pending') {
                message += "\nIf you wish to cancel your order, click the button below.";
                await sendReplyWithCancelOption(sender, message, order.orderId);
            } else {
                await sendReplyWithButton(sender, message, orderComplete);
            }
        } else {
            await sendReplyWithButton(sender, 'No order found with the provided ID.');
        }
    } catch (error) {
        console.error("Error tracking order by ID: ", error);
        await sendReplyWithButton(sender, 'Oops, something went wrong....');
    }
}

async function cancelOrder(sender, orderId) {
    try {
        const order = await Order.findOne({ orderId, sender });
        if (order && order.status === 'Pending') {
            order.status = 'Cancelled';
            await order.save();
            await sendReply(sender, `Your order with ID ${orderId} has been cancelled.`);
        } else {
            await sendReply(sender, 'Cannot cancel the order. Either the order does not exist or it is not in a cancellable state.');
        }
    } catch (error) {
        console.error("Error cancelling order: ", error);
        await sendReply(sender, 'Oops, something went wrong....');
    }
}

async function sendReplyWithCancelOption(sender, reply, orderId) {
    const message = {
        messaging_product: "whatsapp",
        recipient_type: "individual",
        to: sender,
        type: "interactive",
        interactive: {
            type: "button",
            body: {
                text: reply
            },
            action: {
                buttons: [
                    { type: "reply", reply: { id: `CancelOrder_${orderId}`, title: "Cancel Order" }}
                ]
            }
        }
    };

    try {
        const response = await axios({
            method: "POST",
            url: `https://graph.facebook.com/v13.0/${phone_number_id}/messages?access_token=${token}`,
            data: message,
            headers: {
                "Content-Type": "application/json"
            }
        });
        console.log('Message with cancel option sent:', response.data);
    } catch (error) {
        console.error('Error sending message with cancel option:', error.response ? error.response.data : error.message);
    }
}

async function sendTrackOrderOptions(sender) {
    const optionsMessage = {
        messaging_product: "whatsapp",
        recipient_type: "individual",
        to: sender,
        type: "interactive",
        interactive: {
            type: "button",
            body: {
                text: "Choose an option to track your order:"
            },
            action: {
                buttons: [
                    { type: "reply", reply: { id: "TrackCurrentOrder", title: "Track Current Order" }},
                    { type: "reply", reply: { id: "TrackOrderByID", title: "Track Order by ID" }}
                ]
            }
        }
    };

    await sendReplyInteractive(sender, optionsMessage);
}

// Root route to ensure the app is up
app.get("/", (req, res) => {
    res.status(200).send(`Hello, this is webhook setup on port ${port}`);
});

async function sendPaymentLinkWithButtons(sender, paymentLink, totalAmount) {
    const message = {
        messaging_product: "whatsapp",
        to: sender,
        type: "interactive",
        interactive: {
            type: "button",
            body: {
                text: `Your total bill amount is ₹${totalAmount}. Please click the link below to pay via Razorpay:\n\n${paymentLink}`
            },
            action: {
                buttons: [
                    { type: "reply", reply: { id: "PaymentCompleted", title: "Payment Completed" } },
                    { type: "reply", reply: { id: "CancelOrder", title: "Cancel Order" } }
                ]
            }
        }
    };

    try {
        const response = await axios({
            method: "POST",
            url: `https://graph.facebook.com/v13.0/${phone_number_id}/messages?access_token=${token}`,
            data: message,
            headers: {
                "Content-Type": "application/json"
            }
        });
        console.log('Payment link sent successfully:', response.data);
    } catch (error) {
        console.error('Error sending payment link:', error.response ? error.response.data : error.message);
    }
}
